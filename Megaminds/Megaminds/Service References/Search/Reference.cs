//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Megaminds.Search {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Search.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSolarEnergy", ReplyAction="http://tempuri.org/IService/GetSolarEnergyResponse")]
        string GetSolarEnergy(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSolarEnergy", ReplyAction="http://tempuri.org/IService/GetSolarEnergyResponse")]
        System.Threading.Tasks.Task<string> GetSolarEnergyAsync(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWindEnergy", ReplyAction="http://tempuri.org/IService/GetWindEnergyResponse")]
        string GetWindEnergy(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWindEnergy", ReplyAction="http://tempuri.org/IService/GetWindEnergyResponse")]
        System.Threading.Tasks.Task<string> GetWindEnergyAsync(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getNearByCities", ReplyAction="http://tempuri.org/IService/getNearByCitiesResponse")]
        string getNearByCities(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getNearByCities", ReplyAction="http://tempuri.org/IService/getNearByCitiesResponse")]
        System.Threading.Tasks.Task<string> getNearByCitiesAsync(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/findBeautySalons", ReplyAction="http://tempuri.org/IService/findBeautySalonsResponse")]
        string findBeautySalons(string latitude, string longitude, string salonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/findBeautySalons", ReplyAction="http://tempuri.org/IService/findBeautySalonsResponse")]
        System.Threading.Tasks.Task<string> findBeautySalonsAsync(string latitude, string longitude, string salonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getStationInfo", ReplyAction="http://tempuri.org/IService/getStationInfoResponse")]
        string getStationInfo(string latitude, string longitude, string stationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getStationInfo", ReplyAction="http://tempuri.org/IService/getStationInfoResponse")]
        System.Threading.Tasks.Task<string> getStationInfoAsync(string latitude, string longitude, string stationType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Megaminds.Search.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Megaminds.Search.IService>, Megaminds.Search.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSolarEnergy(string latitude, string longitude) {
            return base.Channel.GetSolarEnergy(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetSolarEnergyAsync(string latitude, string longitude) {
            return base.Channel.GetSolarEnergyAsync(latitude, longitude);
        }
        
        public string GetWindEnergy(string latitude, string longitude) {
            return base.Channel.GetWindEnergy(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetWindEnergyAsync(string latitude, string longitude) {
            return base.Channel.GetWindEnergyAsync(latitude, longitude);
        }
        
        public string getNearByCities(string latitude, string longitude) {
            return base.Channel.getNearByCities(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> getNearByCitiesAsync(string latitude, string longitude) {
            return base.Channel.getNearByCitiesAsync(latitude, longitude);
        }
        
        public string findBeautySalons(string latitude, string longitude, string salonType) {
            return base.Channel.findBeautySalons(latitude, longitude, salonType);
        }
        
        public System.Threading.Tasks.Task<string> findBeautySalonsAsync(string latitude, string longitude, string salonType) {
            return base.Channel.findBeautySalonsAsync(latitude, longitude, salonType);
        }
        
        public string getStationInfo(string latitude, string longitude, string stationType) {
            return base.Channel.getStationInfo(latitude, longitude, stationType);
        }
        
        public System.Threading.Tasks.Task<string> getStationInfoAsync(string latitude, string longitude, string stationType) {
            return base.Channel.getStationInfoAsync(latitude, longitude, stationType);
        }
    }
}
