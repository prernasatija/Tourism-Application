//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Megaminds.Geocoder {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Geocoder.ISearch")]
    public interface ISearch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetNearestStore", ReplyAction="http://tempuri.org/ISearch/GetNearestStoreResponse")]
        string GetNearestStore(string zipCode, string storeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetNearestStore", ReplyAction="http://tempuri.org/ISearch/GetNearestStoreResponse")]
        System.Threading.Tasks.Task<string> GetNearestStoreAsync(string zipCode, string storeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/SearchFor", ReplyAction="http://tempuri.org/ISearch/SearchForResponse")]
        string SearchFor(string cityName, string storeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/SearchFor", ReplyAction="http://tempuri.org/ISearch/SearchForResponse")]
        System.Threading.Tasks.Task<string> SearchForAsync(string cityName, string storeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetEmergencyServices", ReplyAction="http://tempuri.org/ISearch/GetEmergencyServicesResponse")]
        string GetEmergencyServices(string latitude, string longitude, string emergencyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetEmergencyServices", ReplyAction="http://tempuri.org/ISearch/GetEmergencyServicesResponse")]
        System.Threading.Tasks.Task<string> GetEmergencyServicesAsync(string latitude, string longitude, string emergencyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetNaturalHazards", ReplyAction="http://tempuri.org/ISearch/GetNaturalHazardsResponse")]
        string GetNaturalHazards(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetNaturalHazards", ReplyAction="http://tempuri.org/ISearch/GetNaturalHazardsResponse")]
        System.Threading.Tasks.Task<string> GetNaturalHazardsAsync(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetGeocodeFromCityName", ReplyAction="http://tempuri.org/ISearch/GetGeocodeFromCityNameResponse")]
        string GetGeocodeFromCityName(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetGeocodeFromCityName", ReplyAction="http://tempuri.org/ISearch/GetGeocodeFromCityNameResponse")]
        System.Threading.Tasks.Task<string> GetGeocodeFromCityNameAsync(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetGeocodeFromZipCode", ReplyAction="http://tempuri.org/ISearch/GetGeocodeFromZipCodeResponse")]
        string GetGeocodeFromZipCode(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetGeocodeFromZipCode", ReplyAction="http://tempuri.org/ISearch/GetGeocodeFromZipCodeResponse")]
        System.Threading.Tasks.Task<string> GetGeocodeFromZipCodeAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetZipCodeFromGeocode", ReplyAction="http://tempuri.org/ISearch/GetZipCodeFromGeocodeResponse")]
        string GetZipCodeFromGeocode(string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetZipCodeFromGeocode", ReplyAction="http://tempuri.org/ISearch/GetZipCodeFromGeocodeResponse")]
        System.Threading.Tasks.Task<string> GetZipCodeFromGeocodeAsync(string latitude, string longitude);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISearchChannel : Megaminds.Geocoder.ISearch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchClient : System.ServiceModel.ClientBase<Megaminds.Geocoder.ISearch>, Megaminds.Geocoder.ISearch {
        
        public SearchClient() {
        }
        
        public SearchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetNearestStore(string zipCode, string storeName) {
            return base.Channel.GetNearestStore(zipCode, storeName);
        }
        
        public System.Threading.Tasks.Task<string> GetNearestStoreAsync(string zipCode, string storeName) {
            return base.Channel.GetNearestStoreAsync(zipCode, storeName);
        }
        
        public string SearchFor(string cityName, string storeType) {
            return base.Channel.SearchFor(cityName, storeType);
        }
        
        public System.Threading.Tasks.Task<string> SearchForAsync(string cityName, string storeType) {
            return base.Channel.SearchForAsync(cityName, storeType);
        }
        
        public string GetEmergencyServices(string latitude, string longitude, string emergencyType) {
            return base.Channel.GetEmergencyServices(latitude, longitude, emergencyType);
        }
        
        public System.Threading.Tasks.Task<string> GetEmergencyServicesAsync(string latitude, string longitude, string emergencyType) {
            return base.Channel.GetEmergencyServicesAsync(latitude, longitude, emergencyType);
        }
        
        public string GetNaturalHazards(string latitude, string longitude) {
            return base.Channel.GetNaturalHazards(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetNaturalHazardsAsync(string latitude, string longitude) {
            return base.Channel.GetNaturalHazardsAsync(latitude, longitude);
        }
        
        public string GetGeocodeFromCityName(string cityName) {
            return base.Channel.GetGeocodeFromCityName(cityName);
        }
        
        public System.Threading.Tasks.Task<string> GetGeocodeFromCityNameAsync(string cityName) {
            return base.Channel.GetGeocodeFromCityNameAsync(cityName);
        }
        
        public string GetGeocodeFromZipCode(string zipCode) {
            return base.Channel.GetGeocodeFromZipCode(zipCode);
        }
        
        public System.Threading.Tasks.Task<string> GetGeocodeFromZipCodeAsync(string zipCode) {
            return base.Channel.GetGeocodeFromZipCodeAsync(zipCode);
        }
        
        public string GetZipCodeFromGeocode(string latitude, string longitude) {
            return base.Channel.GetZipCodeFromGeocode(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetZipCodeFromGeocodeAsync(string latitude, string longitude) {
            return base.Channel.GetZipCodeFromGeocodeAsync(latitude, longitude);
        }
    }
}
